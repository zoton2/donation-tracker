# -*- coding: utf-8 -*-
# Generated by Django 1.9.13 on 2018-01-18 09:22
from __future__ import unicode_literals

import collections
from decimal import Decimal

import django.core.management
import django.core.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import timezone_field.fields
from django.conf import settings
from django.db import migrations, models

import tracker.models.event
import tracker.models.fields
import tracker.util
import tracker.validators

def f0006_fill_in_order_column(apps, schema_editor):
    SpeedRun = apps.get_model('tracker', 'SpeedRun')
    for run in SpeedRun.objects.filter(order=None).order_by('starttime'):
        prev = SpeedRun.objects.filter(event=run.event).exclude(order=None).order_by('starttime').last()
        prev_order = (prev and prev.order) or 0
        run.order = prev_order + 1
        run.save()


def f0006_clear_order_column(apps, schema_editor):
    SpeedRun = apps.get_model('tracker', 'SpeedRun')
    SpeedRun.objects.update(order=None)


def f0013_collect_prize_contributor_names(Prize, AuthUser):
    contributorNames = {}
    for prize in Prize.objects.all():
        if prize.provideremail:
            if prize.provideremail not in contributorNames.keys():
                contributorNames[prize.provideremail] = collections.Counter()
            if prize.provided:
                contributorNames[prize.provideremail][prize.provided.strip()] += 1
    return contributorNames


def f0013_guess_user_id(AuthUser, contributorEmail, contributorNameCounter):
    # user email is a reasonable default in the presence of no other alternative
    userId = contributorEmail

    potentialTags = []

    for name,count in contributorNameCounter.items():
        potentialTags.append((count,name))

    potentialTags.sort(reverse=True)

    # ensure that if we select a username, it is unique
    for count,tag in potentialTags:
        if not AuthUser.objects.filter(username=tag).exists():
            userId = tag
        break

    return userId


def f0013_ensure_existing_users(Prize, AuthUser):
    prizeContribCounts = f0013_collect_prize_contributor_names(Prize, AuthUser)

    for contributorEmail,counterDict in prizeContribCounts.items():
        user = None
        users = AuthUser.objects.filter(email=contributorEmail)
        if users.exists():
             user = users[0]
        else:
            users = AuthUser.objects.filter(username=contributorEmail)
            if users.exists():
                user = users[0]
            else:
                # Creaet a new, inactive user as a placeholder
                user = AuthUser()
                user.is_active = False
        userId = f0013_guess_user_id(AuthUser, contributorEmail, counterDict)
        if not user.username:
            user.username = userId
        if not user.email:
            user.email = contributorEmail

        user.save()


def f0013_populate_prize_contributors(apps, schema_editor):
    Prize = apps.get_model('tracker', 'Prize')
    AuthUser = Prize.provider.field.rel.to

    f0013_ensure_existing_users(Prize, AuthUser)

    for prize in Prize.objects.all():
        if prize.provideremail:
            prize.provider = AuthUser.objects.get(email=prize.provideremail)
        elif prize.provided:
            users = AuthUser.objects.filter(username=prize.provided.strip())
            if users.exists():
                prize.provider = users[0]
        prize.save()


def f0013_read_back_prize_contributors(apps, schema_editor):
    Prize = apps.get_model('tracker', 'Prize')
    AuthUser = Prize.provider.field.rel.to

    for prize in Prize.objects.all():
        if prize.provider:
            if prize.provider.username != prize.provider.email:
                prize.provided = prize.provider.username
            prize.provideremail = prize.provider.email
        prize.save()


def f0023_copy_over_display_name(apps, schema_editor):
    SpeedRun = apps.get_model('tracker', 'SpeedRun')
    for run in SpeedRun.objects.all():
        run.display_name = run.name
        run.save()


def f0024_write_existing_providers(apps, schema_editor):
    Prize = apps.get_model('tracker', 'Prize')
    for prize in Prize.objects.all():
        if prize.handler:
            if prize.handler.username != prize.handler.email:
                prize.provider = prize.handler.username
            prize.save()


def f0026_add_countries(apps, schema_editor):
    django.core.management.call_command('loaddata', 'countries')


def f0026_migrate_to_country_code(apps, schema_editor):
    Country = apps.get_model('tracker', 'Country')
    Donor = apps.get_model('tracker', 'Donor')
    PayPalIPN = apps.get_model('ipn', 'PayPalIPN')
    for d in Donor.objects.all():
        foundCountry = Country.objects.none()
        if d.migrateaddresscountry:
            foundCountry = Country.objects.filter(name=d.migrateaddresscountry)
            if not foundCountry.exists():
                foundCountry = Country.objects.filter(alpha2=d.migrateaddresscountry)
            if not foundCountry.exists():
                foundCountry = Country.objects.filter(alpha3=d.migrateaddresscountry)
            if not foundCountry.exists():
                if tracker.util.try_parse_int(d.migrateaddresscountry) != None:
                    foundCountry = Country.objects.filter(
                        numeric=d.migrateaddresscountry)
        # As a last resort, search through this user's most recent IPN for
        # country data
        if not foundCountry.exists() and d.paypalemail:
            foundIPNs = PayPalIPN.objects.filter(
                payer_email=d.email).order_by('-payment_date')
            if foundIPNs.exists():
                foundIPN = foundIPNs[0]
                foundCountry = Country.objects.filter(
                    alpha2=foundIPN.address_country_code)
        if foundCountry.exists():
            d.addresscountry = foundCountry[0]
            d.save()


def f0026_migrate_from_country_code(apps, schema_editor):
    Donor = apps.get_model('tracker', 'Donor')
    for d in Donor.objects.all():
        if d.addresscountry:
            d.migrateaddresscountry = d.addresscountry.alpha2
            d.save()


class Migration(migrations.Migration):

    replaces = [(b'tracker', '0001_initial'), (b'tracker', '0002_add_external_submissions'), (b'tracker', '0003_add_event_timezone'), (b'tracker', '0004_blanks_and_nulls'), (b'tracker', '0005_run_commentators'), (b'tracker', '0006_run_console_and_fill_in_order'), (b'tracker', '0007_remove_donor_runner_fields'), (b'tracker', '0008_submission_console'), (b'tracker', '0009_change_flowmodel_credentialsmodel_to_1to1_fields'), (b'tracker', '0010_one_to_one_and_typo_fix'), (b'tracker', '0011_add_speedrun_category_releaseyear'), (b'tracker', '0012_speedrun_giantbomb_id'), (b'tracker', '0013_prize_provider'), (b'tracker', '0014_donor_user'), (b'tracker', '0015_add_prizewinner_notes_prize_requiresshipping'), (b'tracker', '0016_prizewinner_acceptemailsentcount'), (b'tracker', '0017_make_donor_user_nullable'), (b'tracker', '0018_prizewinner_courier_name'), (b'tracker', '0019_event_prize_email_templates'), (b'tracker', '0020_prize_reviewnotes'), (b'tracker', '0021_add_prize_accept_deadline'), (b'tracker', '0022_textfields_to_charfields'), (b'tracker', '0023_add_display_name'), (b'tracker', '0024_prize_handler'), (b'tracker', '0025_event_minimumdonation'), (b'tracker', '0026_create_country'), (b'tracker', '0027_event_prize_countries'), (b'tracker', '0028_add_country_region'), (b'tracker', '0029_event_disallowed_prize_regions'), (b'tracker', '0030_add_prize_country_filters'), (b'tracker', '0031_event_prize_accept_deadline_delta'), (b'tracker', '0032_prizewinner_auth_code'), (b'tracker', '0033_prizewinner_shipping_receipt_url'), (b'tracker', '0034_speedrun_coop'), (b'tracker', '0034_add_tech_notes'), (b'tracker', '0035_merge'), (b'tracker', '0036_tech_notes_permissions'), (b'tracker', '0037_add_email_fields'), (b'tracker', '0038_add_donation_indices'), (b'tracker', '0039_upgrade_to_19')]

    initial = True

    dependencies = [
        ('post_office', '__first__'),
        ('auth', '0006_require_contenttypes_0002'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('ipn', '__latest__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('state', models.CharField(choices=[(b'PENDING', b'Pending'), (b'DENIED', b'Denied'), (b'HIDDEN', b'Hidden'), (b'OPENED', b'Opened'), (b'CLOSED', b'Closed')], default=b'OPENED', max_length=32)),
                ('description', models.TextField(blank=True, max_length=1024)),
                ('shortdescription', models.TextField(blank=True, help_text=b'Alternative description text to display in tight spaces', max_length=256, verbose_name=b'Short Description')),
                ('goal', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=20, null=True)),
                ('istarget', models.BooleanField(default=False, help_text=b"Set this if this bid is a 'target' for donations (bottom level choice or challenge)", verbose_name=b'Target')),
                ('allowuseroptions', models.BooleanField(default=False, help_text=b'If set, this will allow donors to specify their own options on the donate page (pending moderator approval)', verbose_name=b'Allow User Options')),
                ('revealedtime', models.DateTimeField(blank=True, null=True, verbose_name=b'Revealed Time')),
                ('total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20)),
                ('count', models.IntegerField(editable=False)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('biddependency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='depedent_bids', to='tracker.Bid', verbose_name=b'Dependency')),
            ],
            options={
                'ordering': ['event__date', 'speedrun__starttime', 'parent__name', 'name'],
                'permissions': (('top_level_bid', 'Can create new top level bids'), ('delete_all_bids', 'Can delete bids with donations attached'), ('view_hidden', 'Can view hidden bids')),
            },
        ),
        migrations.CreateModel(
            name='BidSuggestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name=b'Name')),
                ('bid', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='suggestions', to='tracker.Bid')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(choices=[(b'LOCAL', b'Local'), (b'CHIPIN', b'ChipIn'), (b'PAYPAL', b'PayPal')], default=b'LOCAL', max_length=255)),
                ('domainId', models.CharField(blank=True, editable=False, max_length=160, unique=True)),
                ('transactionstate', models.CharField(choices=[(b'PENDING', b'Pending'), (b'COMPLETED', b'Completed'), (b'CANCELLED', b'Cancelled'), (b'FLAGGED', b'Flagged')], default=b'PENDING', max_length=64, verbose_name=b'Transaction State')),
                ('bidstate', models.CharField(choices=[(b'PENDING', b'Pending'), (b'IGNORED', b'Ignored'), (b'PROCESSED', b'Processed'), (b'FLAGGED', b'Flagged')], default=b'PENDING', max_length=255, verbose_name=b'Bid State')),
                ('readstate', models.CharField(choices=[(b'PENDING', b'Pending'), (b'READY', b'Ready to Read'), (b'IGNORED', b'Ignored'), (b'READ', b'Read'), (b'FLAGGED', b'Flagged')], default=b'PENDING', max_length=255, verbose_name=b'Read State')),
                ('commentstate', models.CharField(choices=[(b'ABSENT', b'Absent'), (b'PENDING', b'Pending'), (b'DENIED', b'Denied'), (b'APPROVED', b'Approved'), (b'FLAGGED', b'Flagged')], default=b'ABSENT', max_length=255, verbose_name=b'Comment State')),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20, validators=[tracker.validators.positive, tracker.validators.nonzero], verbose_name=b'Donation Amount')),
                ('fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20, validators=[tracker.validators.positive], verbose_name=b'Donation Fee')),
                ('currency', models.CharField(choices=[(b'USD', b'US Dollars'), (b'CAD', b'Canadian Dollars'), (b'GBP', b'British Pounds')], max_length=8, verbose_name=b'Currency')),
                ('timereceived', models.DateTimeField(default=django.utils.timezone.now, verbose_name=b'Time Received')),
                ('comment', models.TextField(blank=True, verbose_name=b'Comment')),
                ('modcomment', models.TextField(blank=True, verbose_name=b'Moderator Comment')),
                ('testdonation', models.BooleanField(default=False)),
                ('requestedvisibility', models.CharField(choices=[(b'CURR', b'Use Existing (Anonymous if not set)'), (b'FULL', b'Fully Visible'), (b'FIRST', b'First Name, Last Initial'), (b'ALIAS', b'Alias Only'), (b'ANON', b'Anonymous')], default=b'CURR', max_length=32, verbose_name=b'Requested Visibility')),
                ('requestedalias', models.CharField(blank=True, max_length=32, null=True, verbose_name=b'Requested Alias')),
                ('requestedemail', models.EmailField(blank=True, max_length=128, null=True, verbose_name=b'Requested Contact Email')),
                ('commentlanguage', models.CharField(choices=[(b'un', b'Unknown'), (b'en', b'English'), (b'fr', b'French'), (b'de', b'German')], default=b'un', max_length=32, verbose_name=b'Comment Language')),
            ],
            options={
                'ordering': ['-timereceived'],
                'get_latest_by': 'timereceived',
                'permissions': (('delete_all_donations', 'Can delete non-local donations'), ('view_full_list', 'Can view full donation list'), ('view_comments', 'Can view all comments'), ('view_pending', 'Can view pending donations'), ('view_test', 'Can view test donations'), ('send_to_reader', 'Can send donations to the reader')),
            },
        ),
        migrations.CreateModel(
            name='DonationBid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=20, validators=[tracker.validators.positive, tracker.validators.nonzero])),
                ('bid', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bids', to='tracker.Bid')),
                ('donation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bids', to='tracker.Donation')),
            ],
            options={
                'ordering': ['-donation__timereceived'],
                'verbose_name': 'Donation Bid',
            },
        ),
        migrations.CreateModel(
            name='Donor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=128, verbose_name=b'Contact Email')),
                ('alias', models.CharField(blank=True, max_length=32, null=True)),
                ('firstname', models.CharField(blank=True, max_length=64, verbose_name=b'First Name')),
                ('lastname', models.CharField(blank=True, max_length=64, verbose_name=b'Last Name')),
                ('visibility', models.CharField(choices=[(b'FULL', b'Fully Visible'), (b'FIRST', b'First Name, Last Initial'), (b'ALIAS', b'Alias Only'), (b'ANON', b'Anonymous')], default=b'FIRST', max_length=32)),
                ('addresscity', models.CharField(blank=True, max_length=128, verbose_name=b'City')),
                ('addressstreet', models.CharField(blank=True, max_length=128, verbose_name=b'Street/P.O. Box')),
                ('addressstate', models.CharField(blank=True, max_length=128, verbose_name=b'State/Province')),
                ('addresszip', models.CharField(blank=True, max_length=128, verbose_name=b'Zip/Postal Code')),
                ('addresscountry', models.CharField(blank=True, max_length=128, verbose_name=b'Country')),
                ('paypalemail', models.EmailField(blank=True, max_length=128, null=True, unique=True, verbose_name=b'Paypal Email')),
                ('runneryoutube', models.CharField(blank=True, max_length=128, null=True, unique=True, verbose_name=b'Youtube Account')),
                ('runnertwitch', models.CharField(blank=True, max_length=128, null=True, unique=True, verbose_name=b'Twitch Account')),
                ('runnertwitter', models.CharField(blank=True, max_length=128, null=True, unique=True, verbose_name=b'Twitter Account')),
            ],
            options={
                'ordering': ['lastname', 'firstname', 'email'],
                'permissions': (('delete_all_donors', 'Can delete donors with cleared donations'), ('view_usernames', 'Can view full usernames'), ('view_emails', 'Can view email addresses')),
            },
        ),
        migrations.CreateModel(
            name='DonorCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('donation_total', models.DecimalField(decimal_places=2, default=0, editable=False, max_digits=20, validators=[tracker.validators.positive, tracker.validators.nonzero])),
                ('donation_count', models.IntegerField(default=0, editable=False, validators=[tracker.validators.positive, tracker.validators.nonzero])),
                ('donation_avg', models.DecimalField(decimal_places=2, default=0, editable=False, max_digits=20, validators=[tracker.validators.positive, tracker.validators.nonzero])),
                ('donation_max', models.DecimalField(decimal_places=2, default=0, editable=False, max_digits=20, validators=[tracker.validators.positive, tracker.validators.nonzero])),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.Donor')),
            ],
            options={
                'ordering': ('donor',),
            },
        ),
        migrations.CreateModel(
            name='DonorPrizeEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.DecimalField(decimal_places=2, default=Decimal('1.0'), help_text=b'This is the weight to apply this entry in the drawing (if weight is applicable).', max_digits=20, validators=[tracker.validators.positive, tracker.validators.nonzero], verbose_name=b'Entry Weight')),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tracker.Donor')),
            ],
            options={
                'verbose_name': 'Donor Prize Entry',
                'verbose_name_plural': 'Donor Prize Entries',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short', models.CharField(max_length=64, unique=True)),
                ('name', models.CharField(max_length=128)),
                ('receivername', models.CharField(blank=True, max_length=128, verbose_name=b'Receiver Name')),
                ('targetamount', models.DecimalField(decimal_places=2, max_digits=20, validators=[tracker.validators.positive, tracker.validators.nonzero], verbose_name=b'Target Amount')),
                ('usepaypalsandbox', models.BooleanField(default=False, verbose_name=b'Use Paypal Sandbox')),
                ('paypalemail', models.EmailField(max_length=128, verbose_name=b'Receiver Paypal')),
                ('paypalcurrency', models.CharField(choices=[(b'USD', b'US Dollars'), (b'CAD', b'Canadian Dollars'), (b'GBP', b'British Pounds')], default=b'USD', max_length=8, verbose_name=b'Currency')),
                ('donationemailsender', models.EmailField(blank=True, max_length=128, null=True, verbose_name=b'Donation Email Sender')),
                ('scheduleid', models.CharField(blank=True, max_length=128, null=True, unique=True, verbose_name=b'Schedule ID')),
                ('scheduletimezone', models.CharField(blank=True, choices=[(b'Africa/Abidjan', b'Africa/Abidjan'), (b'Africa/Accra', b'Africa/Accra'), (b'Africa/Addis_Ababa', b'Africa/Addis_Ababa'), (b'Africa/Algiers', b'Africa/Algiers'), (b'Africa/Asmara', b'Africa/Asmara'), (b'Africa/Bamako', b'Africa/Bamako'), (b'Africa/Bangui', b'Africa/Bangui'), (b'Africa/Banjul', b'Africa/Banjul'), (b'Africa/Bissau', b'Africa/Bissau'), (b'Africa/Blantyre', b'Africa/Blantyre'), (b'Africa/Brazzaville', b'Africa/Brazzaville'), (b'Africa/Bujumbura', b'Africa/Bujumbura'), (b'Africa/Cairo', b'Africa/Cairo'), (b'Africa/Casablanca', b'Africa/Casablanca'), (b'Africa/Ceuta', b'Africa/Ceuta'), (b'Africa/Conakry', b'Africa/Conakry'), (b'Africa/Dakar', b'Africa/Dakar'), (b'Africa/Dar_es_Salaam', b'Africa/Dar_es_Salaam'), (b'Africa/Djibouti', b'Africa/Djibouti'), (b'Africa/Douala', b'Africa/Douala'), (b'Africa/El_Aaiun', b'Africa/El_Aaiun'), (b'Africa/Freetown', b'Africa/Freetown'), (b'Africa/Gaborone', b'Africa/Gaborone'), (b'Africa/Harare', b'Africa/Harare'), (b'Africa/Johannesburg', b'Africa/Johannesburg'), (b'Africa/Juba', b'Africa/Juba'), (b'Africa/Kampala', b'Africa/Kampala'), (b'Africa/Khartoum', b'Africa/Khartoum'), (b'Africa/Kigali', b'Africa/Kigali'), (b'Africa/Kinshasa', b'Africa/Kinshasa'), (b'Africa/Lagos', b'Africa/Lagos'), (b'Africa/Libreville', b'Africa/Libreville'), (b'Africa/Lome', b'Africa/Lome'), (b'Africa/Luanda', b'Africa/Luanda'), (b'Africa/Lubumbashi', b'Africa/Lubumbashi'), (b'Africa/Lusaka', b'Africa/Lusaka'), (b'Africa/Malabo', b'Africa/Malabo'), (b'Africa/Maputo', b'Africa/Maputo'), (b'Africa/Maseru', b'Africa/Maseru'), (b'Africa/Mbabane', b'Africa/Mbabane'), (b'Africa/Mogadishu', b'Africa/Mogadishu'), (b'Africa/Monrovia', b'Africa/Monrovia'), (b'Africa/Nairobi', b'Africa/Nairobi'), (b'Africa/Ndjamena', b'Africa/Ndjamena'), (b'Africa/Niamey', b'Africa/Niamey'), (b'Africa/Nouakchott', b'Africa/Nouakchott'), (b'Africa/Ouagadougou', b'Africa/Ouagadougou'), (b'Africa/Porto-Novo', b'Africa/Porto-Novo'), (b'Africa/Sao_Tome', b'Africa/Sao_Tome'), (b'Africa/Tripoli', b'Africa/Tripoli'), (b'Africa/Tunis', b'Africa/Tunis'), (b'Africa/Windhoek', b'Africa/Windhoek'), (b'America/Adak', b'America/Adak'), (b'America/Anchorage', b'America/Anchorage'), (b'America/Anguilla', b'America/Anguilla'), (b'America/Antigua', b'America/Antigua'), (b'America/Araguaina', b'America/Araguaina'), (b'America/Argentina/Buenos_Aires', b'America/Argentina/Buenos_Aires'), (b'America/Argentina/Catamarca', b'America/Argentina/Catamarca'), (b'America/Argentina/Cordoba', b'America/Argentina/Cordoba'), (b'America/Argentina/Jujuy', b'America/Argentina/Jujuy'), (b'America/Argentina/La_Rioja', b'America/Argentina/La_Rioja'), (b'America/Argentina/Mendoza', b'America/Argentina/Mendoza'), (b'America/Argentina/Rio_Gallegos', b'America/Argentina/Rio_Gallegos'), (b'America/Argentina/Salta', b'America/Argentina/Salta'), (b'America/Argentina/San_Juan', b'America/Argentina/San_Juan'), (b'America/Argentina/San_Luis', b'America/Argentina/San_Luis'), (b'America/Argentina/Tucuman', b'America/Argentina/Tucuman'), (b'America/Argentina/Ushuaia', b'America/Argentina/Ushuaia'), (b'America/Aruba', b'America/Aruba'), (b'America/Asuncion', b'America/Asuncion'), (b'America/Atikokan', b'America/Atikokan'), (b'America/Bahia', b'America/Bahia'), (b'America/Bahia_Banderas', b'America/Bahia_Banderas'), (b'America/Barbados', b'America/Barbados'), (b'America/Belem', b'America/Belem'), (b'America/Belize', b'America/Belize'), (b'America/Blanc-Sablon', b'America/Blanc-Sablon'), (b'America/Boa_Vista', b'America/Boa_Vista'), (b'America/Bogota', b'America/Bogota'), (b'America/Boise', b'America/Boise'), (b'America/Cambridge_Bay', b'America/Cambridge_Bay'), (b'America/Campo_Grande', b'America/Campo_Grande'), (b'America/Cancun', b'America/Cancun'), (b'America/Caracas', b'America/Caracas'), (b'America/Cayenne', b'America/Cayenne'), (b'America/Cayman', b'America/Cayman'), (b'America/Chicago', b'America/Chicago'), (b'America/Chihuahua', b'America/Chihuahua'), (b'America/Costa_Rica', b'America/Costa_Rica'), (b'America/Creston', b'America/Creston'), (b'America/Cuiaba', b'America/Cuiaba'), (b'America/Curacao', b'America/Curacao'), (b'America/Danmarkshavn', b'America/Danmarkshavn'), (b'America/Dawson', b'America/Dawson'), (b'America/Dawson_Creek', b'America/Dawson_Creek'), (b'America/Denver', b'America/Denver'), (b'America/Detroit', b'America/Detroit'), (b'America/Dominica', b'America/Dominica'), (b'America/Edmonton', b'America/Edmonton'), (b'America/Eirunepe', b'America/Eirunepe'), (b'America/El_Salvador', b'America/El_Salvador'), (b'America/Fortaleza', b'America/Fortaleza'), (b'America/Glace_Bay', b'America/Glace_Bay'), (b'America/Godthab', b'America/Godthab'), (b'America/Goose_Bay', b'America/Goose_Bay'), (b'America/Grand_Turk', b'America/Grand_Turk'), (b'America/Grenada', b'America/Grenada'), (b'America/Guadeloupe', b'America/Guadeloupe'), (b'America/Guatemala', b'America/Guatemala'), (b'America/Guayaquil', b'America/Guayaquil'), (b'America/Guyana', b'America/Guyana'), (b'America/Halifax', b'America/Halifax'), (b'America/Havana', b'America/Havana'), (b'America/Hermosillo', b'America/Hermosillo'), (b'America/Indiana/Indianapolis', b'America/Indiana/Indianapolis'), (b'America/Indiana/Knox', b'America/Indiana/Knox'), (b'America/Indiana/Marengo', b'America/Indiana/Marengo'), (b'America/Indiana/Petersburg', b'America/Indiana/Petersburg'), (b'America/Indiana/Tell_City', b'America/Indiana/Tell_City'), (b'America/Indiana/Vevay', b'America/Indiana/Vevay'), (b'America/Indiana/Vincennes', b'America/Indiana/Vincennes'), (b'America/Indiana/Winamac', b'America/Indiana/Winamac'), (b'America/Inuvik', b'America/Inuvik'), (b'America/Iqaluit', b'America/Iqaluit'), (b'America/Jamaica', b'America/Jamaica'), (b'America/Juneau', b'America/Juneau'), (b'America/Kentucky/Louisville', b'America/Kentucky/Louisville'), (b'America/Kentucky/Monticello', b'America/Kentucky/Monticello'), (b'America/Kralendijk', b'America/Kralendijk'), (b'America/La_Paz', b'America/La_Paz'), (b'America/Lima', b'America/Lima'), (b'America/Los_Angeles', b'America/Los_Angeles'), (b'America/Lower_Princes', b'America/Lower_Princes'), (b'America/Maceio', b'America/Maceio'), (b'America/Managua', b'America/Managua'), (b'America/Manaus', b'America/Manaus'), (b'America/Marigot', b'America/Marigot'), (b'America/Martinique', b'America/Martinique'), (b'America/Matamoros', b'America/Matamoros'), (b'America/Mazatlan', b'America/Mazatlan'), (b'America/Menominee', b'America/Menominee'), (b'America/Merida', b'America/Merida'), (b'America/Metlakatla', b'America/Metlakatla'), (b'America/Mexico_City', b'America/Mexico_City'), (b'America/Miquelon', b'America/Miquelon'), (b'America/Moncton', b'America/Moncton'), (b'America/Monterrey', b'America/Monterrey'), (b'America/Montevideo', b'America/Montevideo'), (b'America/Montserrat', b'America/Montserrat'), (b'America/Nassau', b'America/Nassau'), (b'America/New_York', b'America/New_York'), (b'America/Nipigon', b'America/Nipigon'), (b'America/Nome', b'America/Nome'), (b'America/Noronha', b'America/Noronha'), (b'America/North_Dakota/Beulah', b'America/North_Dakota/Beulah'), (b'America/North_Dakota/Center', b'America/North_Dakota/Center'), (b'America/North_Dakota/New_Salem', b'America/North_Dakota/New_Salem'), (b'America/Ojinaga', b'America/Ojinaga'), (b'America/Panama', b'America/Panama'), (b'America/Pangnirtung', b'America/Pangnirtung'), (b'America/Paramaribo', b'America/Paramaribo'), (b'America/Phoenix', b'America/Phoenix'), (b'America/Port-au-Prince', b'America/Port-au-Prince'), (b'America/Port_of_Spain', b'America/Port_of_Spain'), (b'America/Porto_Velho', b'America/Porto_Velho'), (b'America/Puerto_Rico', b'America/Puerto_Rico'), (b'America/Rainy_River', b'America/Rainy_River'), (b'America/Rankin_Inlet', b'America/Rankin_Inlet'), (b'America/Recife', b'America/Recife'), (b'America/Regina', b'America/Regina'), (b'America/Resolute', b'America/Resolute'), (b'America/Rio_Branco', b'America/Rio_Branco'), (b'America/Santa_Isabel', b'America/Santa_Isabel'), (b'America/Santarem', b'America/Santarem'), (b'America/Santiago', b'America/Santiago'), (b'America/Santo_Domingo', b'America/Santo_Domingo'), (b'America/Sao_Paulo', b'America/Sao_Paulo'), (b'America/Scoresbysund', b'America/Scoresbysund'), (b'America/Sitka', b'America/Sitka'), (b'America/St_Barthelemy', b'America/St_Barthelemy'), (b'America/St_Johns', b'America/St_Johns'), (b'America/St_Kitts', b'America/St_Kitts'), (b'America/St_Lucia', b'America/St_Lucia'), (b'America/St_Thomas', b'America/St_Thomas'), (b'America/St_Vincent', b'America/St_Vincent'), (b'America/Swift_Current', b'America/Swift_Current'), (b'America/Tegucigalpa', b'America/Tegucigalpa'), (b'America/Thule', b'America/Thule'), (b'America/Thunder_Bay', b'America/Thunder_Bay'), (b'America/Tijuana', b'America/Tijuana'), (b'America/Toronto', b'America/Toronto'), (b'America/Tortola', b'America/Tortola'), (b'America/Vancouver', b'America/Vancouver'), (b'America/Whitehorse', b'America/Whitehorse'), (b'America/Winnipeg', b'America/Winnipeg'), (b'America/Yakutat', b'America/Yakutat'), (b'America/Yellowknife', b'America/Yellowknife'), (b'Antarctica/Casey', b'Antarctica/Casey'), (b'Antarctica/Davis', b'Antarctica/Davis'), (b'Antarctica/DumontDUrville', b'Antarctica/DumontDUrville'), (b'Antarctica/Macquarie', b'Antarctica/Macquarie'), (b'Antarctica/Mawson', b'Antarctica/Mawson'), (b'Antarctica/McMurdo', b'Antarctica/McMurdo'), (b'Antarctica/Palmer', b'Antarctica/Palmer'), (b'Antarctica/Rothera', b'Antarctica/Rothera'), (b'Antarctica/Syowa', b'Antarctica/Syowa'), (b'Antarctica/Troll', b'Antarctica/Troll'), (b'Antarctica/Vostok', b'Antarctica/Vostok'), (b'Arctic/Longyearbyen', b'Arctic/Longyearbyen'), (b'Asia/Aden', b'Asia/Aden'), (b'Asia/Almaty', b'Asia/Almaty'), (b'Asia/Amman', b'Asia/Amman'), (b'Asia/Anadyr', b'Asia/Anadyr'), (b'Asia/Aqtau', b'Asia/Aqtau'), (b'Asia/Aqtobe', b'Asia/Aqtobe'), (b'Asia/Ashgabat', b'Asia/Ashgabat'), (b'Asia/Baghdad', b'Asia/Baghdad'), (b'Asia/Bahrain', b'Asia/Bahrain'), (b'Asia/Baku', b'Asia/Baku'), (b'Asia/Bangkok', b'Asia/Bangkok'), (b'Asia/Beirut', b'Asia/Beirut'), (b'Asia/Bishkek', b'Asia/Bishkek'), (b'Asia/Brunei', b'Asia/Brunei'), (b'Asia/Chita', b'Asia/Chita'), (b'Asia/Choibalsan', b'Asia/Choibalsan'), (b'Asia/Colombo', b'Asia/Colombo'), (b'Asia/Damascus', b'Asia/Damascus'), (b'Asia/Dhaka', b'Asia/Dhaka'), (b'Asia/Dili', b'Asia/Dili'), (b'Asia/Dubai', b'Asia/Dubai'), (b'Asia/Dushanbe', b'Asia/Dushanbe'), (b'Asia/Gaza', b'Asia/Gaza'), (b'Asia/Hebron', b'Asia/Hebron'), (b'Asia/Ho_Chi_Minh', b'Asia/Ho_Chi_Minh'), (b'Asia/Hong_Kong', b'Asia/Hong_Kong'), (b'Asia/Hovd', b'Asia/Hovd'), (b'Asia/Irkutsk', b'Asia/Irkutsk'), (b'Asia/Jakarta', b'Asia/Jakarta'), (b'Asia/Jayapura', b'Asia/Jayapura'), (b'Asia/Jerusalem', b'Asia/Jerusalem'), (b'Asia/Kabul', b'Asia/Kabul'), (b'Asia/Kamchatka', b'Asia/Kamchatka'), (b'Asia/Karachi', b'Asia/Karachi'), (b'Asia/Kathmandu', b'Asia/Kathmandu'), (b'Asia/Khandyga', b'Asia/Khandyga'), (b'Asia/Kolkata', b'Asia/Kolkata'), (b'Asia/Krasnoyarsk', b'Asia/Krasnoyarsk'), (b'Asia/Kuala_Lumpur', b'Asia/Kuala_Lumpur'), (b'Asia/Kuching', b'Asia/Kuching'), (b'Asia/Kuwait', b'Asia/Kuwait'), (b'Asia/Macau', b'Asia/Macau'), (b'Asia/Magadan', b'Asia/Magadan'), (b'Asia/Makassar', b'Asia/Makassar'), (b'Asia/Manila', b'Asia/Manila'), (b'Asia/Muscat', b'Asia/Muscat'), (b'Asia/Nicosia', b'Asia/Nicosia'), (b'Asia/Novokuznetsk', b'Asia/Novokuznetsk'), (b'Asia/Novosibirsk', b'Asia/Novosibirsk'), (b'Asia/Omsk', b'Asia/Omsk'), (b'Asia/Oral', b'Asia/Oral'), (b'Asia/Phnom_Penh', b'Asia/Phnom_Penh'), (b'Asia/Pontianak', b'Asia/Pontianak'), (b'Asia/Pyongyang', b'Asia/Pyongyang'), (b'Asia/Qatar', b'Asia/Qatar'), (b'Asia/Qyzylorda', b'Asia/Qyzylorda'), (b'Asia/Rangoon', b'Asia/Rangoon'), (b'Asia/Riyadh', b'Asia/Riyadh'), (b'Asia/Sakhalin', b'Asia/Sakhalin'), (b'Asia/Samarkand', b'Asia/Samarkand'), (b'Asia/Seoul', b'Asia/Seoul'), (b'Asia/Shanghai', b'Asia/Shanghai'), (b'Asia/Singapore', b'Asia/Singapore'), (b'Asia/Srednekolymsk', b'Asia/Srednekolymsk'), (b'Asia/Taipei', b'Asia/Taipei'), (b'Asia/Tashkent', b'Asia/Tashkent'), (b'Asia/Tbilisi', b'Asia/Tbilisi'), (b'Asia/Tehran', b'Asia/Tehran'), (b'Asia/Thimphu', b'Asia/Thimphu'), (b'Asia/Tokyo', b'Asia/Tokyo'), (b'Asia/Ulaanbaatar', b'Asia/Ulaanbaatar'), (b'Asia/Urumqi', b'Asia/Urumqi'), (b'Asia/Ust-Nera', b'Asia/Ust-Nera'), (b'Asia/Vientiane', b'Asia/Vientiane'), (b'Asia/Vladivostok', b'Asia/Vladivostok'), (b'Asia/Yakutsk', b'Asia/Yakutsk'), (b'Asia/Yekaterinburg', b'Asia/Yekaterinburg'), (b'Asia/Yerevan', b'Asia/Yerevan'), (b'Atlantic/Azores', b'Atlantic/Azores'), (b'Atlantic/Bermuda', b'Atlantic/Bermuda'), (b'Atlantic/Canary', b'Atlantic/Canary'), (b'Atlantic/Cape_Verde', b'Atlantic/Cape_Verde'), (b'Atlantic/Faroe', b'Atlantic/Faroe'), (b'Atlantic/Madeira', b'Atlantic/Madeira'), (b'Atlantic/Reykjavik', b'Atlantic/Reykjavik'), (b'Atlantic/South_Georgia', b'Atlantic/South_Georgia'), (b'Atlantic/St_Helena', b'Atlantic/St_Helena'), (b'Atlantic/Stanley', b'Atlantic/Stanley'), (b'Australia/Adelaide', b'Australia/Adelaide'), (b'Australia/Brisbane', b'Australia/Brisbane'), (b'Australia/Broken_Hill', b'Australia/Broken_Hill'), (b'Australia/Currie', b'Australia/Currie'), (b'Australia/Darwin', b'Australia/Darwin'), (b'Australia/Eucla', b'Australia/Eucla'), (b'Australia/Hobart', b'Australia/Hobart'), (b'Australia/Lindeman', b'Australia/Lindeman'), (b'Australia/Lord_Howe', b'Australia/Lord_Howe'), (b'Australia/Melbourne', b'Australia/Melbourne'), (b'Australia/Perth', b'Australia/Perth'), (b'Australia/Sydney', b'Australia/Sydney'), (b'Canada/Atlantic', b'Canada/Atlantic'), (b'Canada/Central', b'Canada/Central'), (b'Canada/Eastern', b'Canada/Eastern'), (b'Canada/Mountain', b'Canada/Mountain'), (b'Canada/Newfoundland', b'Canada/Newfoundland'), (b'Canada/Pacific', b'Canada/Pacific'), (b'Europe/Amsterdam', b'Europe/Amsterdam'), (b'Europe/Andorra', b'Europe/Andorra'), (b'Europe/Athens', b'Europe/Athens'), (b'Europe/Belgrade', b'Europe/Belgrade'), (b'Europe/Berlin', b'Europe/Berlin'), (b'Europe/Bratislava', b'Europe/Bratislava'), (b'Europe/Brussels', b'Europe/Brussels'), (b'Europe/Bucharest', b'Europe/Bucharest'), (b'Europe/Budapest', b'Europe/Budapest'), (b'Europe/Busingen', b'Europe/Busingen'), (b'Europe/Chisinau', b'Europe/Chisinau'), (b'Europe/Copenhagen', b'Europe/Copenhagen'), (b'Europe/Dublin', b'Europe/Dublin'), (b'Europe/Gibraltar', b'Europe/Gibraltar'), (b'Europe/Guernsey', b'Europe/Guernsey'), (b'Europe/Helsinki', b'Europe/Helsinki'), (b'Europe/Isle_of_Man', b'Europe/Isle_of_Man'), (b'Europe/Istanbul', b'Europe/Istanbul'), (b'Europe/Jersey', b'Europe/Jersey'), (b'Europe/Kaliningrad', b'Europe/Kaliningrad'), (b'Europe/Kiev', b'Europe/Kiev'), (b'Europe/Lisbon', b'Europe/Lisbon'), (b'Europe/Ljubljana', b'Europe/Ljubljana'), (b'Europe/London', b'Europe/London'), (b'Europe/Luxembourg', b'Europe/Luxembourg'), (b'Europe/Madrid', b'Europe/Madrid'), (b'Europe/Malta', b'Europe/Malta'), (b'Europe/Mariehamn', b'Europe/Mariehamn'), (b'Europe/Minsk', b'Europe/Minsk'), (b'Europe/Monaco', b'Europe/Monaco'), (b'Europe/Moscow', b'Europe/Moscow'), (b'Europe/Oslo', b'Europe/Oslo'), (b'Europe/Paris', b'Europe/Paris'), (b'Europe/Podgorica', b'Europe/Podgorica'), (b'Europe/Prague', b'Europe/Prague'), (b'Europe/Riga', b'Europe/Riga'), (b'Europe/Rome', b'Europe/Rome'), (b'Europe/Samara', b'Europe/Samara'), (b'Europe/San_Marino', b'Europe/San_Marino'), (b'Europe/Sarajevo', b'Europe/Sarajevo'), (b'Europe/Simferopol', b'Europe/Simferopol'), (b'Europe/Skopje', b'Europe/Skopje'), (b'Europe/Sofia', b'Europe/Sofia'), (b'Europe/Stockholm', b'Europe/Stockholm'), (b'Europe/Tallinn', b'Europe/Tallinn'), (b'Europe/Tirane', b'Europe/Tirane'), (b'Europe/Uzhgorod', b'Europe/Uzhgorod'), (b'Europe/Vaduz', b'Europe/Vaduz'), (b'Europe/Vatican', b'Europe/Vatican'), (b'Europe/Vienna', b'Europe/Vienna'), (b'Europe/Vilnius', b'Europe/Vilnius'), (b'Europe/Volgograd', b'Europe/Volgograd'), (b'Europe/Warsaw', b'Europe/Warsaw'), (b'Europe/Zagreb', b'Europe/Zagreb'), (b'Europe/Zaporozhye', b'Europe/Zaporozhye'), (b'Europe/Zurich', b'Europe/Zurich'), (b'GMT', b'GMT'), (b'Indian/Antananarivo', b'Indian/Antananarivo'), (b'Indian/Chagos', b'Indian/Chagos'), (b'Indian/Christmas', b'Indian/Christmas'), (b'Indian/Cocos', b'Indian/Cocos'), (b'Indian/Comoro', b'Indian/Comoro'), (b'Indian/Kerguelen', b'Indian/Kerguelen'), (b'Indian/Mahe', b'Indian/Mahe'), (b'Indian/Maldives', b'Indian/Maldives'), (b'Indian/Mauritius', b'Indian/Mauritius'), (b'Indian/Mayotte', b'Indian/Mayotte'), (b'Indian/Reunion', b'Indian/Reunion'), (b'Pacific/Apia', b'Pacific/Apia'), (b'Pacific/Auckland', b'Pacific/Auckland'), (b'Pacific/Bougainville', b'Pacific/Bougainville'), (b'Pacific/Chatham', b'Pacific/Chatham'), (b'Pacific/Chuuk', b'Pacific/Chuuk'), (b'Pacific/Easter', b'Pacific/Easter'), (b'Pacific/Efate', b'Pacific/Efate'), (b'Pacific/Enderbury', b'Pacific/Enderbury'), (b'Pacific/Fakaofo', b'Pacific/Fakaofo'), (b'Pacific/Fiji', b'Pacific/Fiji'), (b'Pacific/Funafuti', b'Pacific/Funafuti'), (b'Pacific/Galapagos', b'Pacific/Galapagos'), (b'Pacific/Gambier', b'Pacific/Gambier'), (b'Pacific/Guadalcanal', b'Pacific/Guadalcanal'), (b'Pacific/Guam', b'Pacific/Guam'), (b'Pacific/Honolulu', b'Pacific/Honolulu'), (b'Pacific/Johnston', b'Pacific/Johnston'), (b'Pacific/Kiritimati', b'Pacific/Kiritimati'), (b'Pacific/Kosrae', b'Pacific/Kosrae'), (b'Pacific/Kwajalein', b'Pacific/Kwajalein'), (b'Pacific/Majuro', b'Pacific/Majuro'), (b'Pacific/Marquesas', b'Pacific/Marquesas'), (b'Pacific/Midway', b'Pacific/Midway'), (b'Pacific/Nauru', b'Pacific/Nauru'), (b'Pacific/Niue', b'Pacific/Niue'), (b'Pacific/Norfolk', b'Pacific/Norfolk'), (b'Pacific/Noumea', b'Pacific/Noumea'), (b'Pacific/Pago_Pago', b'Pacific/Pago_Pago'), (b'Pacific/Palau', b'Pacific/Palau'), (b'Pacific/Pitcairn', b'Pacific/Pitcairn'), (b'Pacific/Pohnpei', b'Pacific/Pohnpei'), (b'Pacific/Port_Moresby', b'Pacific/Port_Moresby'), (b'Pacific/Rarotonga', b'Pacific/Rarotonga'), (b'Pacific/Saipan', b'Pacific/Saipan'), (b'Pacific/Tahiti', b'Pacific/Tahiti'), (b'Pacific/Tarawa', b'Pacific/Tarawa'), (b'Pacific/Tongatapu', b'Pacific/Tongatapu'), (b'Pacific/Wake', b'Pacific/Wake'), (b'Pacific/Wallis', b'Pacific/Wallis'), (b'US/Alaska', b'US/Alaska'), (b'US/Arizona', b'US/Arizona'), (b'US/Central', b'US/Central'), (b'US/Eastern', b'US/Eastern'), (b'US/Hawaii', b'US/Hawaii'), (b'US/Mountain', b'US/Mountain'), (b'US/Pacific', b'US/Pacific'), (b'UTC', b'UTC')], default=b'US/Eastern', max_length=64, verbose_name=b'Schedule Timezone')),
                ('scheduledatetimefield', models.CharField(blank=True, max_length=128, verbose_name=b'Schedule Datetime')),
                ('schedulegamefield', models.CharField(blank=True, max_length=128, verbose_name=b'Schdule Game')),
                ('schedulerunnersfield', models.CharField(blank=True, max_length=128, verbose_name=b'Schedule Runners')),
                ('scheduleestimatefield', models.CharField(blank=True, max_length=128, verbose_name=b'Schedule Estimate')),
                ('schedulesetupfield', models.CharField(blank=True, max_length=128, verbose_name=b'Schedule Setup')),
                ('schedulecommentatorsfield', models.CharField(blank=True, max_length=128, verbose_name=b'Schedule Commentators')),
                ('schedulecommentsfield', models.CharField(blank=True, max_length=128, verbose_name=b'Schedule Comments')),
                ('date', models.DateField()),
                ('locked', models.BooleanField(default=False, help_text=b'Requires special permission to edit this event or anything associated with it')),
                ('donationemailtemplate', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='event_donation_templates', to='post_office.EmailTemplate', verbose_name=b'Donation Email Template')),
                ('pendingdonationemailtemplate', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='event_pending_donation_templates', to='post_office.EmailTemplate', verbose_name=b'Pending Donation Email Template')),
            ],
            options={
                'ordering': ('date',),
                'get_latest_by': 'date',
                'permissions': (('can_edit_locked_events', 'Can edit locked events'),),
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name=b'Timestamp')),
                ('category', models.CharField(default=b'other', max_length=64, verbose_name=b'Category')),
                ('message', models.TextField(blank=True, verbose_name=b'Message')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tracker.Event')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'verbose_name': 'Log',
                'permissions': (('can_view_log', 'Can view tracker logs'), ('can_change_log', 'Can change tracker logs')),
            },
        ),
        migrations.CreateModel(
            name='PostbackURL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(verbose_name=b'URL')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='postbacks', to='tracker.Event', verbose_name=b'Event')),
            ],
        ),
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('image', models.URLField(blank=True, max_length=1024, null=True)),
                ('altimage', models.URLField(blank=True, help_text=b'A second image to display in situations where the default image is not appropriate (tight spaces, stream, etc...)', max_length=1024, null=True, verbose_name=b'Alternate Image')),
                ('imagefile', models.FileField(blank=True, null=True, upload_to=b'prizes')),
                ('description', models.TextField(blank=True, max_length=1024, null=True)),
                ('shortdescription', models.TextField(blank=True, help_text=b'Alternative description text to display in tight spaces', max_length=256, verbose_name=b'Short Description')),
                ('extrainfo', models.TextField(blank=True, max_length=1024, null=True)),
                ('estimatedvalue', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, validators=[tracker.validators.positive, tracker.validators.nonzero], verbose_name=b'Estimated Value')),
                ('minimumbid', models.DecimalField(decimal_places=2, default=Decimal('5.0'), max_digits=20, validators=[tracker.validators.positive, tracker.validators.nonzero], verbose_name=b'Minimum Bid')),
                ('maximumbid', models.DecimalField(blank=True, decimal_places=2, default=Decimal('5.0'), max_digits=20, null=True, validators=[tracker.validators.positive, tracker.validators.nonzero], verbose_name=b'Maximum Bid')),
                ('sumdonations', models.BooleanField(default=False, verbose_name=b'Sum Donations')),
                ('randomdraw', models.BooleanField(default=True, verbose_name=b'Random Draw')),
                ('ticketdraw', models.BooleanField(default=False, verbose_name=b'Ticket Draw')),
                ('starttime', models.DateTimeField(blank=True, null=True, verbose_name=b'Start Time')),
                ('endtime', models.DateTimeField(blank=True, null=True, verbose_name=b'End Time')),
                ('maxwinners', models.IntegerField(default=1, validators=[tracker.validators.positive, tracker.validators.nonzero], verbose_name=b'Max Winners')),
                ('maxmultiwin', models.IntegerField(default=1, validators=[tracker.validators.positive, tracker.validators.nonzero], verbose_name=b'Max Wins per Donor')),
                ('provided', models.CharField(blank=True, max_length=64, null=True, verbose_name=b'Provided By')),
                ('provideremail', models.EmailField(blank=True, max_length=128, null=True, verbose_name=b'Provider Email')),
                ('acceptemailsent', models.BooleanField(default=False, verbose_name=b'Accept/Deny Email Sent')),
                ('creator', models.CharField(blank=True, max_length=64, null=True, verbose_name=b'Creator')),
                ('creatoremail', models.EmailField(blank=True, max_length=128, null=True, verbose_name=b'Creator Email')),
                ('creatorwebsite', models.CharField(blank=True, max_length=128, null=True, verbose_name=b'Creator Website')),
                ('state', models.CharField(choices=[(b'PENDING', b'Pending'), (b'ACCEPTED', b'Accepted'), (b'DENIED', b'Denied'), (b'FLAGGED', b'Flagged')], default=b'PENDING', max_length=32)),
            ],
            options={
                'ordering': ['event__date', 'startrun__starttime', 'starttime', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PrizeCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name': 'Prize Category',
                'verbose_name_plural': 'Prize Categories',
            },
        ),
        migrations.CreateModel(
            name='PrizeTicket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=20, validators=[tracker.validators.positive, tracker.validators.nonzero])),
                ('donation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='tracker.Donation')),
                ('prize', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='tracker.Prize')),
            ],
            options={
                'ordering': ['-donation__timereceived'],
                'verbose_name': 'Prize Ticket',
            },
        ),
        migrations.CreateModel(
            name='PrizeWinner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pendingcount', models.IntegerField(default=1, help_text=b'The number of pending wins this donor has on this prize.', validators=[tracker.validators.positive], verbose_name=b'Pending Count')),
                ('acceptcount', models.IntegerField(default=0, help_text=b'The number of copied this winner has won and accepted.', validators=[tracker.validators.positive], verbose_name=b'Accept Count')),
                ('declinecount', models.IntegerField(default=0, help_text=b'The number of declines this donor has put towards this prize. Set it to the max prize multi win amount to prevent this donor from being entered from future drawings.', validators=[tracker.validators.positive], verbose_name=b'Decline Count')),
                ('sumcount', models.IntegerField(default=1, editable=False, help_text=b'The total number of prize instances associated with this winner', validators=[tracker.validators.positive], verbose_name=b'Sum Counts')),
                ('emailsent', models.BooleanField(default=False, verbose_name=b'Notification Email Sent')),
                ('shippingemailsent', models.BooleanField(default=False, verbose_name=b'Shipping Email Sent')),
                ('trackingnumber', models.CharField(blank=True, max_length=64, verbose_name=b'Tracking Number')),
                ('shippingstate', models.CharField(choices=[(b'PENDING', b'Pending'), (b'SHIPPED', b'Shipped')], default=b'PENDING', max_length=64, verbose_name=b'Shipping State')),
                ('shippingcost', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, validators=[tracker.validators.positive, tracker.validators.nonzero], verbose_name=b'Shipping Cost')),
                ('prize', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tracker.Prize')),
                ('winner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tracker.Donor')),
            ],
            options={
                'verbose_name': 'Prize Winner',
            },
        ),
        migrations.CreateModel(
            name='SpeedRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(editable=False, max_length=64)),
                ('deprecated_runners', models.CharField(blank=True, max_length=1024, verbose_name=b'*DEPRECATED* Runners')),
                ('description', models.TextField(blank=True, max_length=1024)),
                ('starttime', models.DateTimeField(verbose_name=b'Start Time')),
                ('endtime', models.DateTimeField(verbose_name=b'End Time')),
                ('event', models.ForeignKey(default=tracker.models.event.LatestEvent, on_delete=django.db.models.deletion.PROTECT, to='tracker.Event')),
                ('runners', models.ManyToManyField(blank=True, null=True, to=b'tracker.Donor')),
            ],
            options={
                'ordering': ['event__date', 'starttime'],
                'verbose_name': 'Speed Run',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prepend', models.CharField(blank=True, max_length=64, verbose_name=b'Template Prepend')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, unique=True)),
            ],
            options={
                'verbose_name': 'User Profile',
                'permissions': (('show_rendertime', 'Can view page render times'), ('show_queries', 'Can view database queries'), ('sync_schedule', 'Can sync the schedule'), ('can_search', 'Can use search url')),
            },
        ),
        migrations.AddField(
            model_name='prize',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tracker.PrizeCategory'),
        ),
        migrations.AddField(
            model_name='prize',
            name='endrun',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prize_end', to='tracker.SpeedRun', verbose_name=b'End Run'),
        ),
        migrations.AddField(
            model_name='prize',
            name='event',
            field=models.ForeignKey(default=tracker.models.event.LatestEvent, on_delete=django.db.models.deletion.PROTECT, to='tracker.Event'),
        ),
        migrations.AddField(
            model_name='prize',
            name='startrun',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prize_start', to='tracker.SpeedRun', verbose_name=b'Start Run'),
        ),
        migrations.AddField(
            model_name='donorprizeentry',
            name='prize',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tracker.Prize'),
        ),
        migrations.AddField(
            model_name='donorcache',
            name='event',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tracker.Event'),
        ),
        migrations.AddField(
            model_name='donation',
            name='donor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tracker.Donor'),
        ),
        migrations.AddField(
            model_name='donation',
            name='event',
            field=models.ForeignKey(default=tracker.models.event.LatestEvent, on_delete=django.db.models.deletion.PROTECT, to='tracker.Event'),
        ),
        migrations.AddField(
            model_name='bid',
            name='event',
            field=models.ForeignKey(blank=True, help_text=b'Required for top level bids if Run is not set', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='bids', to='tracker.Event', verbose_name=b'Event'),
        ),
        migrations.AddField(
            model_name='bid',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='options', to='tracker.Bid', verbose_name=b'Parent'),
        ),
        migrations.AddField(
            model_name='bid',
            name='speedrun',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='bids', to='tracker.SpeedRun', verbose_name=b'Run'),
        ),
        migrations.AlterUniqueTogether(
            name='speedrun',
            unique_together=set([('name', 'event')]),
        ),
        migrations.AlterUniqueTogether(
            name='prizewinner',
            unique_together=set([('prize', 'winner')]),
        ),
        migrations.AlterUniqueTogether(
            name='prizeticket',
            unique_together=set([('prize', 'donation')]),
        ),
        migrations.AlterUniqueTogether(
            name='prize',
            unique_together=set([('name', 'event')]),
        ),
        migrations.AlterUniqueTogether(
            name='donorprizeentry',
            unique_together=set([('prize', 'donor')]),
        ),
        migrations.AlterUniqueTogether(
            name='donorcache',
            unique_together=set([('event', 'donor')]),
        ),
        migrations.AlterUniqueTogether(
            name='donationbid',
            unique_together=set([('bid', 'donation')]),
        ),
        migrations.AlterUniqueTogether(
            name='bid',
            unique_together=set([('event', 'name', 'speedrun', 'parent')]),
        ),
        migrations.CreateModel(
            name='Runner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('stream', models.URLField(blank=True, max_length=128)),
                ('twitter', models.SlugField(blank=True, max_length=15)),
                ('youtube', models.SlugField(blank=True, max_length=20)),
                ('donor', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tracker.Donor')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('external_id', models.IntegerField(primary_key=True, serialize=False)),
                ('game_name', models.TextField(max_length=64)),
                ('category', models.TextField(max_length=32)),
                ('estimate', tracker.models.event.TimestampField()),
            ],
        ),
        migrations.AlterModelOptions(
            name='speedrun',
            options={'ordering': ['event__date', 'order'], 'verbose_name': 'Speed Run'},
        ),
        migrations.AddField(
            model_name='speedrun',
            name='order',
            field=models.IntegerField(editable=False, null=True),
        ),
        migrations.AddField(
            model_name='speedrun',
            name='run_time',
            field=tracker.models.event.TimestampField(default=0),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='speedrun',
            name='setup_time',
            field=tracker.models.event.TimestampField(default=0),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='speedrun',
            name='deprecated_runners',
            field=models.CharField(blank=True, editable=False, max_length=1024, verbose_name=b'*DEPRECATED* Runners'),
        ),
        migrations.AlterField(
            model_name='speedrun',
            name='endtime',
            field=models.DateTimeField(editable=False, verbose_name=b'End Time'),
        ),
        migrations.AlterField(
            model_name='speedrun',
            name='runners',
            field=models.ManyToManyField(to=b'tracker.Runner'),
        ),
        migrations.AlterField(
            model_name='speedrun',
            name='starttime',
            field=models.DateTimeField(editable=False, verbose_name=b'Start Time'),
        ),
        migrations.AlterField(
            model_name='speedrun',
            name='endtime',
            field=models.DateTimeField(editable=False, null=True, verbose_name=b'End Time'),
        ),
        migrations.AlterField(
            model_name='speedrun',
            name='starttime',
            field=models.DateTimeField(editable=False, null=True, verbose_name=b'Start Time'),
        ),
        migrations.AddField(
            model_name='speedrun',
            name='commentators',
            field=models.CharField(blank=True, max_length=1024),
        ),
        migrations.AddField(
            model_name='speedrun',
            name='console',
            field=models.CharField(blank=True, max_length=32),
        ),
        migrations.AlterField(
            model_name='speedrun',
            name='deprecated_runners',
            field=models.CharField(blank=True, editable=False, max_length=1024, validators=[tracker.models.event.runners_exists], verbose_name=b'*DEPRECATED* Runners'),
        ),
        migrations.AlterUniqueTogether(
            name='speedrun',
            unique_together=set([('name', 'event'), ('event', 'order')]),
        ),
        migrations.AddField(
            model_name='submission',
            name='run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.SpeedRun'),
        ),
        migrations.AddField(
            model_name='submission',
            name='runner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.Runner'),
        ),
        migrations.AddField(
            model_name='event',
            name='timezone',
            field=timezone_field.fields.TimeZoneField(default=b'US/Eastern'),
        ),
        migrations.AlterField(
            model_name='speedrun',
            name='name',
            field=models.CharField(max_length=64),
        ),
        migrations.RunPython(
            code=f0006_fill_in_order_column,
            reverse_code=f0006_clear_order_column,
        ),
        migrations.RemoveField(
            model_name='donor',
            name='runnertwitch',
        ),
        migrations.RemoveField(
            model_name='donor',
            name='runnertwitter',
        ),
        migrations.RemoveField(
            model_name='donor',
            name='runneryoutube',
        ),
        migrations.AddField(
            model_name='submission',
            name='console',
            field=models.TextField(default='', max_length=32),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='bid',
            name='biddependency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='dependent_bids', to='tracker.Bid', verbose_name=b'Dependency'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='speedrun',
            name='category',
            field=models.TextField(blank=True, help_text=b'The type of run being performed', max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='speedrun',
            name='release_year',
            field=models.IntegerField(blank=True, help_text=b'The year the game was released', null=True, verbose_name=b'Release Year'),
        ),
        migrations.AddField(
            model_name='speedrun',
            name='giantbomb_id',
            field=models.IntegerField(blank=True, help_text=b'Identifies the game in the GiantBomb database, to allow auto-population of game data.', null=True, verbose_name=b'GiantBomb Database ID'),
        ),
        migrations.AlterUniqueTogether(
            name='speedrun',
            unique_together=set([('event', 'order'), ('name', 'category', 'event')]),
        ),
        migrations.AddField(
            model_name='prize',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.RunPython(
            code=f0013_populate_prize_contributors,
            reverse_code=f0013_read_back_prize_contributors,
        ),
        migrations.RemoveField(
            model_name='prize',
            name='provided',
        ),
        migrations.RemoveField(
            model_name='prize',
            name='provideremail',
        ),
        migrations.AddField(
            model_name='donor',
            name='user',
            field=tracker.models.fields.OneToOneOrNoneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='prize',
            name='requiresshipping',
            field=models.BooleanField(default=True, verbose_name=b'Requires Postal Shipping'),
        ),
        migrations.AddField(
            model_name='prizewinner',
            name='shippingnotes',
            field=models.TextField(blank=True, max_length=2048, verbose_name=b'Shipping Notes'),
        ),
        migrations.AddField(
            model_name='prizewinner',
            name='winnernotes',
            field=models.TextField(blank=True, max_length=1024, verbose_name=b'Winner Notes'),
        ),
        migrations.AddField(
            model_name='prizewinner',
            name='acceptemailsentcount',
            field=models.IntegerField(default=0, help_text=b'The number of accepts that the previous e-mail was sent for (or 0 if none were sent yet).', validators=[tracker.validators.positive], verbose_name=b'Accept Count Sent For'),
        ),
        migrations.AddField(
            model_name='prizewinner',
            name='couriername',
            field=models.CharField(blank=True, help_text=b'e.g. FedEx, DHL, ...', max_length=64, verbose_name=b'Courier Service Name'),
        ),
        migrations.AddField(
            model_name='event',
            name='prizecontributoremailtemplate',
            field=models.ForeignKey(blank=True, default=None, help_text=b"Email template to use when responding to prize contributor's submission requests", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_prizecontributortemplates', to='post_office.EmailTemplate', verbose_name=b'Prize Contributor Accept/Deny Email Template'),
        ),
        migrations.AddField(
            model_name='event',
            name='prizecoordinator',
            field=models.ForeignKey(blank=True, default=None, help_text=b'The person responsible for managing prize acceptance/distribution', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name=b'Prize Coordinator'),
        ),
        migrations.AddField(
            model_name='event',
            name='prizeshippedemailtemplate',
            field=models.ForeignKey(blank=True, default=None, help_text=b'Email template to use when the aprize has been shipped to its recipient).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_prizeshippedtemplates', to='post_office.EmailTemplate', verbose_name=b'Prize Shipped Email Template'),
        ),
        migrations.AddField(
            model_name='event',
            name='prizewinneracceptemailtemplate',
            field=models.ForeignKey(blank=True, default=None, help_text=b'Email template to use when someone accepts a prize (and thus it needs to be shipped).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_prizewinneraccepttemplates', to='post_office.EmailTemplate', verbose_name=b'Prize Accepted Email Template'),
        ),
        migrations.AddField(
            model_name='event',
            name='prizewinneremailtemplate',
            field=models.ForeignKey(blank=True, default=None, help_text=b'Email template to use when someone wins a prize.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_prizewinnertemplates', to='post_office.EmailTemplate', verbose_name=b'Prize Winner Email Template'),
        ),
        migrations.AddField(
            model_name='prize',
            name='reviewnotes',
            field=models.TextField(blank=True, help_text=b'Notes for the contributor (for example, why a particular prize was denied)', max_length=1024, verbose_name=b'Review Notes'),
        ),
        migrations.AddField(
            model_name='prizewinner',
            name='acceptdeadline',
            field=models.DateTimeField(blank=True, default=None, help_text=b'The deadline for this winner to accept their prize (leave blank for no deadline)', null=True, verbose_name=b'Winner Accept Deadline'),
        ),
        migrations.AlterField(
            model_name='speedrun',
            name='category',
            field=models.CharField(blank=True, help_text=b'The type of run being performed', max_length=64, null=True),
        ),
        migrations.AlterField(
            model_name='submission',
            name='category',
            field=models.CharField(max_length=64),
        ),
        migrations.AlterField(
            model_name='submission',
            name='console',
            field=models.CharField(max_length=32),
        ),
        migrations.AlterField(
            model_name='submission',
            name='game_name',
            field=models.CharField(max_length=64),
        ),
        migrations.AddField(
            model_name='speedrun',
            name='display_name',
            field=models.TextField(blank=True, help_text=b'How to display this game on the stream.', max_length=256, verbose_name=b'Display Name'),
        ),
        migrations.RunPython(
            code=f0023_copy_over_display_name,
        ),
        migrations.RenameField(
            model_name='prize',
            old_name='provider',
            new_name='handler',
        ),
        migrations.AddField(
            model_name='prize',
            name='provider',
            field=models.CharField(blank=True, help_text=b'Name of the person who provided the prize to the event', max_length=64),
        ),
        migrations.AlterField(
            model_name='prize',
            name='handler',
            field=models.ForeignKey(help_text=b'User account responsible for prize shipping', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.RunPython(
            code=f0024_write_existing_providers,
        ),
        migrations.AddField(
            model_name='event',
            name='minimumdonation',
            field=models.DecimalField(decimal_places=2, default=Decimal('1.00'), help_text=b'Enforces a minimum donation amount on the donate page.', max_digits=20, validators=[tracker.validators.positive, tracker.validators.nonzero], verbose_name=b'Minimum Donation'),
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text=b'Official ISO 3166 name for the country', max_length=64, unique=True)),
                ('alpha2', models.CharField(help_text=b'ISO 3166-1 Two-letter code', max_length=2, unique=True, validators=[django.core.validators.RegexValidator(message=b'Country Alpha-2 code must be exactly 2 uppercase alphabetic characters', regex=b'^[A-Z]{2}$')])),
                ('alpha3', models.CharField(help_text=b'ISO 3166-1 Three-letter code', max_length=3, unique=True, validators=[django.core.validators.RegexValidator(message=b'Country Alpha-3 code must be exactly 3 uppercase alphabetic characters', regex=b'^[A-Z]{3}$')])),
                ('numeric', models.CharField(blank=True, help_text=b'ISO 3166-1 numeric code', max_length=3, null=True, unique=True, validators=[django.core.validators.RegexValidator(message=b'Country Numeric code must be exactly 3 digits', regex=b'^\\\\d{3}$')])),
            ],
            options={
                'ordering': ('alpha2',),
                'permissions': (('can_edit_countries', 'Can edit countries'),),
            },
        ),
        migrations.RunPython(
            code=f0026_add_countries,
        ),
        migrations.RenameField(
            model_name='donor',
            old_name='addresscountry',
            new_name='migrateaddresscountry',
        ),
        migrations.AddField(
            model_name='donor',
            name='addresscountry',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tracker.Country', verbose_name='Country'),
        ),
        migrations.RunPython(
            code=f0026_migrate_to_country_code,
            reverse_code=f0026_migrate_from_country_code,
        ),
        migrations.RemoveField(
            model_name='donor',
            name='migrateaddresscountry',
        ),
        migrations.AddField(
            model_name='event',
            name='allowed_prize_countries',
            field=models.ManyToManyField(blank=True, help_text=b'List of countries whose residents are allowed to receive prizes (leave blank to allow all countries)', to=b'tracker.Country', verbose_name=b'Allowed Prize Countries'),
        ),
        migrations.CreateModel(
            name='CountryRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'ordering': ('country', 'name'),
                'verbose_name': 'country region',
            },
        ),
        migrations.AlterModelOptions(
            name='country',
            options={'ordering': ('alpha2',), 'verbose_name_plural': 'countries'},
        ),
        migrations.AddField(
            model_name='countryregion',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tracker.Country'),
        ),
        migrations.AlterUniqueTogether(
            name='countryregion',
            unique_together=set([('name', 'country')]),
        ),
        migrations.AddField(
            model_name='event',
            name='disallowed_prize_regions',
            field=models.ManyToManyField(blank=True, help_text=b'A blacklist of regions within allowed countries that are not allowed for drawings (e.g. Quebec in Canada)', to=b'tracker.CountryRegion', verbose_name=b'Disallowed Regions'),
        ),
        migrations.AddField(
            model_name='prize',
            name='allowed_prize_countries',
            field=models.ManyToManyField(blank=True, help_text=b'List of countries whose residents are allowed to receive prizes (leave blank to allow all countries)', to=b'tracker.Country', verbose_name=b'Prize Countries'),
        ),
        migrations.AddField(
            model_name='prize',
            name='custom_country_filter',
            field=models.BooleanField(default=False, help_text=b'If checked, use a different country filter than that of the event.', verbose_name=b'Use Custom Country Filter'),
        ),
        migrations.AddField(
            model_name='prize',
            name='disallowed_prize_regions',
            field=models.ManyToManyField(blank=True, help_text=b'A blacklist of regions within allowed countries that are not allowed for drawings (e.g. Quebec in Canada)', to=b'tracker.CountryRegion', verbose_name=b'Disallowed Regions'),
        ),
        migrations.AddField(
            model_name='event',
            name='prize_accept_deadline_delta',
            field=models.IntegerField(default=14, help_text=b'The number of days a winner will be given to accept a prize before it is re-rolled.', validators=[tracker.validators.positive, tracker.validators.nonzero], verbose_name=b'Prize Accept Deadline Delta'),
        ),
        migrations.AddField(
            model_name='prizewinner',
            name='auth_code',
            field=models.CharField(default=tracker.util.make_auth_code, editable=False, help_text=b'Used instead of a login for winners to manage prizes.', max_length=64),
        ),
        migrations.AddField(
            model_name='prizewinner',
            name='shipping_receipt_url',
            field=models.URLField(blank=True, help_text=b'The URL of an image of the shipping receipt', max_length=1024, verbose_name=b'Shipping Receipt Image URL'),
        ),
        migrations.AddField(
            model_name='speedrun',
            name='coop',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='speedrun',
            name='tech_notes',
            field=models.TextField(blank=True, help_text=b'Notes for the tech crew'),
        ),
        migrations.AlterModelOptions(
            name='speedrun',
            options={'ordering': ['event__date', 'order'], 'permissions': (('can_view_tech_notes', 'Can view tech notes'),), 'verbose_name': 'Speed Run'},
        ),
        migrations.AlterField(
            model_name='speedrun',
            name='coop',
            field=models.BooleanField(default=False, help_text=b'Cooperative runs should be marked with this for layout purposes'),
        ),
        migrations.AddField(
            model_name='donation',
            name='requestedsolicitemail',
            field=models.CharField(choices=[(b'CURR', b'Use Existing (Opt Out if not set)'), (b'OPTOUT', b'Opt Out'), (b'OPTIN', b'Opt In')], default=b'CURR', max_length=32, verbose_name=b'Requested Charity Email Opt In'),
        ),
        migrations.AddField(
            model_name='donor',
            name='solicitemail',
            field=models.CharField(choices=[(b'CURR', b'Use Existing (Opt Out if not set)'), (b'OPTOUT', b'Opt Out'), (b'OPTIN', b'Opt In')], default=b'CURR', max_length=32),
        ),
        migrations.AlterField(
            model_name='donation',
            name='bidstate',
            field=models.CharField(choices=[(b'PENDING', b'Pending'), (b'IGNORED', b'Ignored'), (b'PROCESSED', b'Processed'), (b'FLAGGED', b'Flagged')], db_index=True, default=b'PENDING', max_length=255, verbose_name=b'Bid State'),
        ),
        migrations.AlterField(
            model_name='donation',
            name='commentstate',
            field=models.CharField(choices=[(b'ABSENT', b'Absent'), (b'PENDING', b'Pending'), (b'DENIED', b'Denied'), (b'APPROVED', b'Approved'), (b'FLAGGED', b'Flagged')], db_index=True, default=b'ABSENT', max_length=255, verbose_name=b'Comment State'),
        ),
        migrations.AlterField(
            model_name='donation',
            name='readstate',
            field=models.CharField(choices=[(b'PENDING', b'Pending'), (b'READY', b'Ready to Read'), (b'IGNORED', b'Ignored'), (b'READ', b'Read'), (b'FLAGGED', b'Flagged')], db_index=True, default=b'PENDING', max_length=255, verbose_name=b'Read State'),
        ),
        migrations.AlterField(
            model_name='donation',
            name='transactionstate',
            field=models.CharField(choices=[(b'PENDING', b'Pending'), (b'COMPLETED', b'Completed'), (b'CANCELLED', b'Cancelled'), (b'FLAGGED', b'Flagged')], db_index=True, default=b'PENDING', max_length=64, verbose_name=b'Transaction State'),
        ),
        migrations.AlterField(
            model_name='donation',
            name='timereceived',
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name=b'Time Received'),
        ),
        migrations.AlterModelOptions(
            name='userprofile',
            options={'permissions': (('show_rendertime', 'Can view page render times'), ('show_queries', 'Can view database queries'), ('can_search', 'Can use search url')), 'verbose_name': 'User Profile'},
        ),
        migrations.RemoveField(
            model_name='event',
            name='schedulecommentatorsfield',
        ),
        migrations.RemoveField(
            model_name='event',
            name='schedulecommentsfield',
        ),
        migrations.RemoveField(
            model_name='event',
            name='scheduledatetimefield',
        ),
        migrations.RemoveField(
            model_name='event',
            name='scheduleestimatefield',
        ),
        migrations.RemoveField(
            model_name='event',
            name='schedulegamefield',
        ),
        migrations.RemoveField(
            model_name='event',
            name='schedulerunnersfield',
        ),
        migrations.RemoveField(
            model_name='event',
            name='schedulesetupfield',
        ),
        migrations.RemoveField(
            model_name='event',
            name='scheduletimezone',
        ),
        migrations.AlterField(
            model_name='donationbid',
            name='amount',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=20, validators=[tracker.validators.positive, tracker.validators.nonzero]),
        ),
        migrations.AlterField(
            model_name='event',
            name='scheduleid',
            field=models.CharField(blank=True, editable=False, max_length=128, null=True, unique=True, verbose_name=b'Schedule ID (LEGACY)'),
        ),
    ]
